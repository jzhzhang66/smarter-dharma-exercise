{"version":3,"sources":["Logo.png","header.js","sideNav.js","utils.js","square.js","india.js","unitedStates.js","italy.js","china.js","australia.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","className","Brand","src","logo","alt","React","Component","SideNav","Nav","to","this","props","location","pathname","includes","withRouter","axios","require","useApi","cities","a","toReturn","i","length","get","params","city","key","res","push","data","emoji","temp","Square","icon","India","state","loading","information","cleanInfo","bind","toSet","setState","indiaCities","then","toRender","map","x","chunk","UnitedStates","usCities","Italy","italyCities","China","console","log","chinaCities","Australia","australiaCities","App","class","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46de212e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.f5e46e67.png\";","import React from 'react';\nimport './App.css';\nimport { Navbar } from 'react-bootstrap'\nimport logo from './Logo.png'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <Navbar className=\"header\" >\n                <Navbar.Brand>\n                    <img className=\"logo\" src={logo} alt=\"\" />\n                </Navbar.Brand>\n            </Navbar>\n        )\n    }\n}\n\nexport default Header ","import React from 'react';\nimport './App.css';\nimport { Nav } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom';\n\nclass SideNav extends React.Component {\n\n    render() {\n        return (\n            <div className=\"drawer\">\n                <Nav className=\"flex-column\">\n                    <Link to=\"/India\" className={this.props.location.pathname.includes(\"India\") ? \"item-selected\" : \"item-not-selected\"}>India</Link>\n                    <Link to=\"/UnitedStates\" className={this.props.location.pathname.includes(\"UnitedStates\") ? \"item-selected\" : \"item-not-selected\"}>United States</Link>\n                    <Link to=\"/China\" className={this.props.location.pathname.includes(\"China\") ? \"item-selected\" : \"item-not-selected\"}>China</Link>\n                    <Link to=\"/Italy\" className={this.props.location.pathname.includes(\"Italy\") ? \"item-selected\" : \"item-not-selected\"}>Italy</Link>\n                    <Link to=\"/Australia\" className={this.props.location.pathname.includes(\"Australia\") ? \"item-selected\" : \"item-not-selected\"}>Australia</Link>\n                </Nav>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(SideNav) ","\nvar axios = require('axios')\n\nexport async function useApi(cities) {\n\tconst toReturn = [];\n\tvar i;\n\tfor (i = 0; i < cities.length; i++) {\n\t\tconst res = await axios.get('https://api.weatherbit.io/v2.0/current', {\n\t\t\tparams: {\n\t\t\t\tcity: cities[i],\n\t\t\t\tkey: \"bef9aa6bb3e94dd5a456646acac257b5\"\n\t\t\t}\n\t\t})\n\t\ttoReturn.push(res.data)\n\t}\n\n\treturn toReturn\n}\n\nexport function emoji(temp) {\n\tif (temp > 25) {\n\t\treturn \"🔥\"\n\t}\n\telse if (temp >= 15 && temp <= 25) {\n\t\treturn \"☀️\"\n\t}\n\telse if (temp >= 5 && temp < 15) {\n\t\treturn \"☁️\"\n\t}\n\telse {\n\t\treturn \"❄️\"\n\t}\n}","import React from 'react';\nimport './App.css';\n\n\nclass Square extends React.Component {\n\n    render() {\n        return (\n            <div className=\"square\">\n                <div className=\"city\">{this.props.city}</div>\n                <div className=\"temp\">{this.props.temp}</div>\n                <div className=\"icon\">{this.props.icon}</div>\n            </div>\n        )\n    }\n}\n\nexport default Square","import React from 'react';\nimport { useApi, emoji } from './utils';\nimport Square from './square';\nimport { chunk } from 'lodash';\n\nclass India extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            information: []\n        }\n        this.cleanInfo = this.cleanInfo.bind(this);\n    }\n\n    cleanInfo(cities) {\n        var i;\n        let toSet = []\n        for (i = 0; i < cities.length; i++) {\n            toSet.push({\n                city: cities[i],\n                temp: this.state.information[i].data[0].temp\n            })\n        }\n        this.setState(() => {\n            return {\n                information: toSet \n            }\n        })\n    }\n\n    componentDidMount() {\n        const indiaCities = [\"Mumbai\", \"Delhi\", \"Bangalore\", \"Hyderabad\", \"Ahmedabad\", \"Chennai\", \"Bangalore\", \"Hyderabad\", \"Ahmedabad\", \"Chennai\", \"Kolkata\", \"Surat\", \"Pune\", \"Jaipur\", \"Lucknow\",\n        \"Kanpur\", \"Nagpur\", \"Indore\", \"Thane\", \"Bhopal\", \"Visakhapatnam\", \"Patna\", \"Vadodara\", \"Ghaziabad\", \"Ludhiana\", \"Agra\", \"Nashik\", \n        \"Faridabad\", \"Meerut\", \"Rajkot\", \"Varanasi\", \"Srinagar\", \"Aurangabad\", \"Gaya\"]\n        useApi(indiaCities).then((res) => {\n            this.setState(() => {\n                return {\n                    loading: false,\n                    information: res\n                }\n            })\n            this.cleanInfo(indiaCities)\n        })\n    }\n\n \n\n    render() {\n        let toRender = this.state.information.map(x => <Square city={x.city} temp={x.temp + \" °C \" } icon={emoji(x.temp)}/>)\n        toRender = chunk(toRender, 5)\n        return (\n            <div>\n                {toRender.map(x => <div className=\"row\">{x}</div> )}\n            </div>\n        )\n    }\n}\n\nexport default India","import React from 'react';\nimport { useApi, emoji } from './utils';\nimport Square from './square';\nimport { chunk } from 'lodash';\n\nclass UnitedStates extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            information: []\n        }\n        this.cleanInfo = this.cleanInfo.bind(this);\n    }\n\n    cleanInfo(cities) {\n        var i;\n        let toSet = []\n        for (i = 0; i < cities.length; i++) {\n            toSet.push({\n                city: cities[i],\n                temp: this.state.information[i].data[0].temp\n            })\n        }\n        this.setState(() => {\n            return {\n                information: toSet \n            }\n        })\n    }\n\n    componentDidMount() {\n        const usCities = [\"New York City\", \"Vancouver\", \"Boston\", \"Baltimore\", \"Miami\", \"Houston\", \"Dallas\", \"Los Angelos\", \"Philadelphia\", \"San Diego\",\n    \"San Antonio\", \"Charlotte\", \"Seattle\", \"Memphis\", \"Atlanta\", \"Sacramento\", \"Kansas City\", \"Irvine\", \"San Francisco\", \"Tampa\", \n    \"Oakland\", \"Cleveland\", \"Wichita\", \"Honolulu\", \"Pittsburgh\", \"Detroit\", \"Portland\", \"Nashville\", \"Las Vegas\", \"Raleigh\"]\n        useApi(usCities).then((res) => {\n            this.setState(() => {\n                return {\n                    loading: false,\n                    information: res\n                }\n            })\n            this.cleanInfo(usCities)\n        })\n    }\n\n \n\n    render() {\n        let toRender = this.state.information.map(x => <Square city={x.city} temp={x.temp + \" °C \" } icon={emoji(x.temp)}/>)\n        toRender = chunk(toRender, 5)\n        return (\n            <div>\n                {toRender.map(x => <div className=\"row\">{x}</div> )}\n            </div>\n        )\n    }\n}\n\nexport default UnitedStates ","import React from 'react';\nimport { useApi, emoji } from './utils';\nimport Square from './square';\nimport { chunk } from 'lodash';\n\nclass Italy extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            information: []\n        }\n        this.cleanInfo = this.cleanInfo.bind(this);\n    }\n\n    cleanInfo(cities) {\n        var i;\n        let toSet = []\n        for (i = 0; i < cities.length; i++) {\n            toSet.push({\n                city: cities[i],\n                temp: this.state.information[i].data[0].temp\n            })\n        }\n        this.setState(() => {\n            return {\n                information: toSet\n            }\n        })\n    }\n\n    componentDidMount() {\n        const italyCities = [\"Atri\", \"Avezzano\", \"Chieti\", \"Lanciano\", \"Ortona\", \"Pescara\", \"Sulmona\", \"Teramo\", \"Vasto\", \"Matera\",\n            \"Melfi\", \"Potenza\", \"Venosa\", \"Catanzaro\", \"Cosenza\", \"Crotone\", \"Amalfi\", \"Avellino\", \"Aversa\", \"Benevento\",\n            \"Capua\", \"Caserta\", \"Naples\", \"Portici\", \"Salerno\", \"Sarno\", \"Sorrento\", \"Argenta\", 'Bobbio', \"Bologna\"]\n        useApi(italyCities).then((res) => {\n            this.setState(() => {\n                return {\n                    loading: false,\n                    information: res\n                }\n            })\n            this.cleanInfo(italyCities)\n        })\n    }\n\n\n\n    render() {\n        let toRender = this.state.information.map(x => <Square city={x.city} temp={x.temp + \" °C \"} icon={emoji(x.temp)} />)\n        toRender = chunk(toRender, 5)\n        return (\n            <div>\n                {toRender.map(x => <div className=\"row\">{x}</div>)}\n            </div>\n        )\n    }\n}\n\nexport default Italy","import React from 'react';\nimport { useApi, emoji } from './utils';\nimport Square from './square';\nimport { chunk } from 'lodash';\n\nclass China extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            information: []\n        }\n        this.cleanInfo = this.cleanInfo.bind(this);\n    }\n\n    cleanInfo(cities) {\n        var i;\n        let toSet = []\n        for (i = 0; i < cities.length; i++) {\n            console.log(this.state.information[i].data)\n            toSet.push({\n                city: cities[i],\n                temp: this.state.information[i].data[0].temp\n            })\n        }\n        this.setState(() => {\n            return {\n                information: toSet\n            }\n        })\n    }\n\n    componentDidMount() {\n        const chinaCities = [\"Anqing\", \"Bengbu\", \"Hefei\", \"Huainan\", \"Qingdao\", \"Shexian\", \"Tongcheng\", \"Tongling\", \"Wuhu\", \"Xuancheng\",\n            \"Beijing\", \"Chongqing\", \"Hechuan\", \"Wanzhou\", \"Fuzhou\", \"Longyan\", \"Nanping\", \"Quanzhou\", \"Sanming\", \"Shaowu\",\n            \"Xiamen\", \"Zhangzhou\", \"Dunhuang\", \"Jiuquan\", \"Lanzhou\", \"Pingliang\", \"Tianshui\", \"Wuwei\", \"Yumen\", \"Jiangmen\"]\n        useApi(chinaCities).then((res) => {\n            this.setState(() => {\n                return {\n                    loading: false,\n                    information: res\n                }\n            })\n            this.cleanInfo(chinaCities)\n        })\n    }\n\n\n\n    render() {\n        let toRender = this.state.information.map(x => <Square city={x.city} temp={x.temp + \" °C \"} icon={emoji(x.temp)} />)\n        toRender = chunk(toRender, 5)\n        return (\n            <div>\n                {toRender.map(x => <div className=\"row\">{x}</div>)}\n            </div>\n        )\n    }\n}\n\nexport default China","import React from 'react';\nimport { useApi, emoji } from './utils';\nimport Square from './square';\nimport { chunk } from 'lodash';\n\nclass Australia extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            information: []\n        }\n        this.cleanInfo = this.cleanInfo.bind(this);\n    }\n\n    cleanInfo(cities) {\n        var i;\n        let toSet = []\n        for (i = 0; i < cities.length; i++) {\n            toSet.push({\n                city: cities[i],\n                temp: this.state.information[i].data[0].temp\n            })\n        }\n        this.setState(() => {\n            return {\n                information: toSet \n            }\n        })\n    }\n\n    componentDidMount() {\n        const australiaCities = [\"Armidale\", \"Ballina\", \"Bathurst\", \"Bega\", \"Bourke\", \"Bowral\", \"Camden\", \"Cobar\", \"Cooma\",\n         \"Corowa\", \"Dubbo\", \"Forbes\", \"Forster\", \"Gosford\", \"Goulburn\", \"Grafton\", \"Inverell\", \"Kempsey\", \"Kiama\", \n         \"Lismore\", \"Maitland\", \"Narrabri\", \"Penrith\", \"Queanbeyan\", \"Singleton\", \"Sydney\", \"Wellington\", \"Perth\", \"Brisbane\", \"Hobart\"]\n        useApi(australiaCities).then((res) => {\n            this.setState(() => {\n                return {\n                    loading: false,\n                    information: res\n                }\n            })\n            this.cleanInfo(australiaCities)\n        })\n    }\n\n \n\n    render() {\n        let toRender = this.state.information.map(x => <Square city={x.city} temp={x.temp + \" °C \" } icon={emoji(x.temp)}/>)\n        toRender = chunk(toRender, 5)\n        return (\n            <div>\n                {toRender.map(x => <div className=\"row\">{x}</div> )}\n            </div>\n        )\n    }\n}\n\nexport default Australia","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './header';\nimport SideNav from './sideNav';\nimport { BrowserRouter as Switch, Route } from 'react-router-dom';\nimport India from './india';\nimport UnitedStates from './unitedStates';\nimport Italy from './italy';\nimport China from './china';\nimport Australia from './australia';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div class=\"main-div\">\n        <Header />\n        <SideNav />\n        <Switch>\n          <Route path=\"/India\" component={India} />\n          <Route path=\"/UnitedStates\" component={UnitedStates} />\n          <Route path=\"/Australia\" component={Australia} />\n          <Route path=\"/China\" component={China} />\n          <Route path=\"/Italy\" component={Italy} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}